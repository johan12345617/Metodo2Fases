{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","variables","setvariables","funcionObjetivo","setfuncionObjetivo","constraints","setconstraints","signo","setsigno","lastConst","setlastConst","type","settype","lines","setlines","solution","setsolution","factible","setfactible","showSolution","setshowSolution","result","setresult","console","log","id","class","src","width","height","href","name","autocomplete","checked","onClick","for","value","onChange","e","vars","cons","index","push","updateRange","Number","target","min","max","map","role","aria-label","tempArray","updatefo","style","marginLeft","updatecons","className","linestemp","line","forEach","addConstraint","rowspan","window","location","reload","modelFormat","unshift","solver","ReformatLP","Solve","feasible","bounded","isIntegral","resolverProblema","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50157259.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./assets/css/jsx.css\";\nimport \"./assets/css/multipleselectbox.css\";\n// import './assets/css/themes/demos.css'\nimport \"./assets/css/cupertino/jquery-ui-1.8.4.custom.css\";\nimport solver from \"javascript-lp-solver\";\nconst App = () => {\n  const [variables, setvariables] = useState(2);\n  const [funcionObjetivo, setfuncionObjetivo] = useState([0, 0]);\n  const [constraints, setconstraints] = useState([0, 0]);\n  const [signo, setsigno] = useState(\"<=\");\n  const [lastConst, setlastConst] = useState(0);\n  const [type, settype] = useState(\"max\");\n  const [lines, setlines] = useState([]);\n  const [solution, setsolution] = useState({});\n  const [factible, setfactible] = useState(true);\n  const [showSolution, setshowSolution] = useState(false);\n  const [result, setresult] = useState(0);\n\n  console.log(funcionObjetivo);\n  console.log(constraints);\n  const updateRange = (value) => {\n    setvariables(value);\n    let vars = [];\n    let cons = [];\n    for (let index = 0; index < value; index++) {\n      vars.push(0);\n      cons.push(0);\n    }\n    console.log(vars);\n    setconstraints(cons);\n    setfuncionObjetivo(vars);\n  };\n\n  const updatefo = (value, index) => {\n    let tempArray = funcionObjetivo;\n    tempArray[index] = Number(value);\n    setfuncionObjetivo([...tempArray]);\n  };\n\n  const updatecons = (value, index) => {\n    let tempArray = constraints;\n    tempArray[index] = Number(value);\n    setconstraints([...tempArray]);\n  };\n\n  const addConstraint = () => {\n    let linestemp = lines;\n    let line = \"\";\n    constraints.forEach((e, index) => {\n      line = line + `${e}` + \" \" + `x${index + 1}` + \" \";\n    });\n    line = line + \" \" + `${signo}` + \" \" + `${lastConst}` + \"\";\n    linestemp.push(line);\n    setlines([...linestemp]);\n  };\n\n  const resolverProblema = () => {\n    let line = type == \"max\" ? \"max: \" : \"min: \";\n    funcionObjetivo.forEach((e, index) => {\n      line = line + `${e}` + \" \" + `x${index + 1}` + \" \";\n    });\n\n    let modelFormat = lines;\n    modelFormat.unshift(line);\n    modelFormat = solver.ReformatLP(modelFormat);\n    let solution = solver.Solve(modelFormat);\n    console.log(solution);\n    setresult(solution.result);\n    setfactible(solution.feasible);\n    delete solution.feasible;\n    delete solution.bounded;\n    delete solution.result;\n    delete solution.isIntegral;\n    setsolution(solution);\n\n    setshowSolution(true);\n  };\n\n  console.log(lines);\n\n  return (\n    <>\n      <div id=\"cabecera\" class=\"ui-state-default ui-corner-all\">\n        Javascript 2 Fases\n      </div>\n      <div class=\"image-container\">\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/UNMSM_coatofarms_seal.svg/1200px-UNMSM_coatofarms_seal.svg.png\"\n          width=\"50\"\n          height=\"60\"\n        />\n      </div>\n      <div id=\"simplex_tabs\">\n        <ul>\n          <li>\n            <a href=\"#tab_simplex\">2 Fases</a>\n          </li>\n        </ul>\n        <div id=\"tab_simplex\">\n          <div id=\"jsx_funcion_objetivo\">\n            <div class=\"titulo ui-state-default ui-corner-all\">\n              Funci√≥n objetivo\n            </div>\n            <div class=\"contenido ui-corner-all\">\n              <div class=\"btn-group\">\n                <input\n                  type=\"radio\"\n                  class=\"btn-check\"\n                  name=\"btnradio\"\n                  autocomplete=\"off\"\n                  checked={type == \"max\"}\n                />\n                <label\n                  class=\"btn btn-outline-danger\"\n                  onClick={() => settype(\"max\")}\n                >\n                  Maximizar\n                </label>\n\n                <input\n                  type=\"radio\"\n                  class=\"btn-check\"\n                  name=\"btnradio\"\n                  autocomplete=\"off\"\n                  checked={type == \"min\"}\n                />\n                <label\n                  class=\"btn btn-outline-danger\"\n                  onClick={() => settype(\"min\")}\n                >\n                  Minimizar\n                </label>\n              </div>\n              <br />\n\n              <label for=\"customRange1\" class=\"form-label\">\n                Variables {variables}\n              </label>\n              <input\n                type=\"range\"\n                value={variables}\n                onChange={(e) => updateRange(Number(e.target.value))}\n                class=\"form-range\"\n                id=\"customRange1\"\n                min=\"1\"\n                max=\"10\"\n              />\n\n              <table>\n                {funcionObjetivo.map((e, index) => {\n                  return (\n                    <tr>\n                      <div\n                        class=\"btn-group\"\n                        role=\"group\"\n                        aria-label=\"Basic radio toggle button group\"\n                      >\n                        <input\n                          type=\"text\"\n                          onChange={(e) => updatefo(e.target.value, index)}\n                        />{\" \"}\n                        <span style={{ marginLeft: 10 }}>\n                          X <sub>{index + 1}</sub>\n                        </span>\n                      </div>\n                    </tr>\n                  );\n                })}\n              </table>\n            </div>\n          </div>\n          <div id=\"jsx_restricciones\">\n            <div class=\"titulo ui-state-default ui-corner-all\">\n              Restricciones\n            </div>\n\n            <div class=\"contenido ui-corner-all\">\n              <table>\n                {constraints.map((e, index) => {\n                  return (\n                    <tr>\n                      <div\n                        class=\"btn-group\"\n                        role=\"group\"\n                        aria-label=\"Basic radio toggle button group\"\n                      >\n                        <input\n                          type=\"text\"\n                          onChange={(e) => updatecons(e.target.value, index)}\n                        />{\" \"}\n                        <span style={{ marginLeft: 10 }}>\n                          X <sub>{index + 1}</sub>\n                        </span>\n                      </div>\n                    </tr>\n                  );\n                })}\n              </table>\n              <table id=\"jsx_res\">\n                <tr>\n                  <td>\n                    <div id=\"jsx_res_nueva\">\n                      <div id=\"jsx_res_fo_cont\"></div>\n                      <div id=\"jsx_res_fo_signo\">\n                        <div class=\"btn-group\">\n                          <button\n                            type=\"button\"\n                            className={\n                              signo === \"<=\"\n                                ? \"btn btn-danger\"\n                                : \"btn btn-outline-danger\"\n                            }\n                            onClick={() => setsigno(\"<=\")}\n                          >\n                            ‚â§\n                          </button>\n                          <button\n                            type=\"button\"\n                            className={\n                              signo === \"=\"\n                                ? \"btn btn-danger\"\n                                : \"btn btn-outline-danger\"\n                            }\n                            onClick={() => setsigno(\"=\")}\n                          >\n                            =\n                          </button>\n                          <button\n                            type=\"button\"\n                            className={\n                              signo === \">=\"\n                                ? \"btn btn-danger\"\n                                : \"btn btn-outline-danger\"\n                            }\n                            onClick={() => setsigno(\">=\")}\n                          >\n                            ‚â•\n                          </button>\n                        </div>\n                        <input\n                          type=\"text\"\n                          onChange={(e) => setlastConst(Number(e.target.value))}\n                        />\n                      </div>\n                      <div id=\"jsx_res_fo_nombre\">\n                        <button\n                          className=\"btn btn-danger\"\n                          onClick={() => addConstraint()}\n                        >\n                          A√±adir\n                        </button>\n                      </div>\n                    </div>\n                  </td>\n                  <td>\n                    <div id=\"jsx_res_cont\">\n                      <div class=\"ui-state-default ui-corner-all\">\n                        Restricciones actuales\n                      </div>\n                      <ul class=\"list-group\">\n                        {lines.map((e) => {\n                          return <li class=\"list-group-item\">{e}</li>;\n                        })}\n                      </ul>\n                    </div>\n                  </td>\n                </tr>\n              </table>\n            </div>\n          </div>\n          <div id=\"jsx_problema\">\n            <div class=\"titulo ui-state-default ui-corner-all\">Problema</div>\n            <div class=\"contenido ui-corner-all\">\n              <table>\n                <tr>\n                  <td id=\"jsx_pro_botonestd\" rowspan=\"2\">\n                    <div id=\"jsx_pro_botones\">\n                      <button\n                        className=\"btn btn-danger\"\n                        onClick={() => window.location.reload()}\n                      >\n                        Nuevo problema\n                      </button>\n                      <button\n                        onClick={() => resolverProblema()}\n                        className=\"btn btn-danger\"\n                      >\n                        Resolver problema\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n                <tr></tr>\n              </table>\n            </div>\n          </div>\n          <div id=\"jsx_solucion\">\n            <div class=\"titulo ui-state-default ui-corner-all\">Soluci√≥n</div>\n            {showSolution && (\n              <b>{factible ? \"Es factible\" : \"No es Factible\"}</b>\n            )}\n            {showSolution && factible && (\n              <div>\n                <h2>Resultados:</h2>\n                <b>El valor optimo es</b>\n                <p>Z={result}</p>\n                <b>Con los valores de:</b>\n                <div>{JSON.stringify(solution)}</div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}